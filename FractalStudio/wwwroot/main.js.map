{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/logger.service.ts","webpack:///./src/app/mMap/m-map.display.component.html","webpack:///./src/app/mMap/m-map.display.component.ts","webpack:///./src/app/mMap/m-map.module.ts","webpack:///./src/app/mMap/m-map.service.ts","webpack:///./src/app/mMapCommon/m-map-common.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","\n<h2>Map Output Section</h2>\n<app-m-map-display></app-m-map-display>\n\n\n\n","import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { Logger } from './logger.service';\r\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements AfterViewInit, OnInit {\r\n\n  private viewInitialized: boolean;\n\n  constructor(private logger: Logger) {\n\n    this.viewInitialized = false;\r\n  }\n\n  ngOnInit(): void {\r\n    console.log(\"We are inited.\");\r\n  }\n\r\n  ngOnChanges() {\r\n    if (!this.viewInitialized) return;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (!this.viewInitialized) {\r\n      this.viewInitialized = true;\r\n      console.log(\"About to draw from AfterViewInit.\");\r\n    }\r\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n//import { SampleModule } from '../fractalMapLib';\n\nimport { AppComponent } from './app.component';\nimport { Logger } from './logger.service';\n\nimport { MMapModule } from './mMap/m-map.module';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    MMapModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  providers: [Logger],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class Logger {\r\n  log(msg: any) { console.log(msg); }\r\n  error(msg: any) { console.error(msg); }\r\n  warn(msg: any) { console.warn(msg); }\r\n}\r\n","\r\n<canvas #myCanvas width=\"100\" height=\"100\"></canvas>\r\n","import { Component, OnInit, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { Logger } from '../logger.service';\r\nimport { IMapWorkingData } from '../mMapCommon/m-map-common';\nimport { MMapService } from './m-map.service';\r\n\n@Component({\n  selector: 'app-m-map-display',\n  templateUrl: './m-map.display.component.html',\n  styleUrls: ['./m-map.display.component.css']\n})\nexport class MMapDisplayComponent implements AfterViewInit, OnInit {\r\n\r\n  @ViewChild('myCanvas') canvasRef: ElementRef;\n\n  public alive: boolean;\n\n  private viewInitialized: boolean;\n  private result: IMapWorkingData;\n\n  constructor(private logger: Logger, private mService: MMapService) {\n    this.viewInitialized = false;\r\n\n    logger.log('Hey, this is the new Map Canvas Component.');\n\n    this.result = mService.createTestMapWD();\n\n    this.alive = this.result.doInterations(10);\n\n    //var flags: boolean[] = MapWorkingData.getFlagData(result);\n    //this.rLen = flags.length;\n  }\n\n  draw(): void {\n    let ctx: CanvasRenderingContext2D = this.canvasRef.nativeElement.getContext('2d');\n\n    ctx.fillStyle = '#DD0031';\n    ctx.clearRect(0, 0, 100, 100);\n\r\n    console.log(\"Got ctx.\");\r\n\r\n    let imgData: ImageData = ctx.getImageData(0, 0, 100, 100);\r\n    console.log(\"Got image data.\");\r\n\r\n    //let iDataData: Uint8ClampedArray = imgData.data;\r\n\r\n    this.result.updateImageData(imgData.data);\n    console.log(\"Updated buffer data.\");\r\n\r\n    ctx.putImageData(imgData, 0, 0);\r\n    console.log(\"Updated canvas.\");\r\n  }\n\n  ngOnInit(): void {\r\n    console.log(\"We are inited.\");\r\n  }\r\n\r\n  ngOnChanges() {\r\n    if (!this.viewInitialized) return;\r\n    this.draw();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (!this.viewInitialized) {\r\n      this.viewInitialized = true;\r\n      console.log(\"About to draw from AfterViewInit.\");\r\n      this.draw();\r\n    }\r\n  }\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MMapDisplayComponent } from './m-map.display.component';\r\nimport { MMapService } from './m-map.service';\r\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    MMapDisplayComponent\n  ],\n  exports: [MMapDisplayComponent],\n  providers: [MMapService]\n})\nexport class MMapModule { }\n","import { Injectable } from '@angular/core';\n\nimport { IPoint, Point, ICanvasSize, CanvasSize, IMapInfo, MapInfo, IMapWorkingData, MapWorkingData } from '../mMapCommon/m-map-common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MMapService {\n\n  constructor() { }\n\n  public createTestMapWD(): IMapWorkingData {\n\n    const maxInterations = 1000;\n    const cs: ICanvasSize = new CanvasSize(100, 100);\n\n    const bottomLeft: IPoint = new Point(-2, -1);\n    const topRight: IPoint = new Point(1, 1);\n\n    const mi: IMapInfo = new MapInfo(bottomLeft, topRight, maxInterations);\n\n    { debugger }\n    let result: IMapWorkingData = new MapWorkingData(cs, mi);\n    return result;\n\n    \n    //var alive = result.doInterations(10);\n\n    //var flags: boolean[] = MapWorkingData.getFlagData(result);\n\n    //const fIndex:number = flags.findIndex(t => t === false);\n    //{ debugger }\n\n    ////alive = false;\n\n    ////for (var flag:boolean in flags) {\n    ////  if (!flag) {\n    ////    alive = true;\n    ////    break;\n    ////  }\n    ////}\n\n    //console.log(\"The flags has \" + flags.length + \" elements.\");\n\n    //if (alive) {\n    //  console.log(\"There is at least one point that is in the set.\");\n    //}\n    //else {\n    //  console.log(\"There are no points in the set.\");\n    //}\n    //return result;\n  }\n\n}\n","\r\nconst MAX_CANVAS_WIDTH: number = 5000;\r\nconst MAX_CANVAS_HEIGHT: number = 5000;\r\n\r\nexport interface IPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface IMapInfo {\r\n  bottomLeft: IPoint;\r\n  topRight: IPoint;\r\n  maxInterations: number;\r\n}\r\n\r\nexport interface ICanvasSize {\r\n  width: number;\r\n  height: number\r\n}\r\n\r\nexport interface IMapWorkingData {\r\n  canvasSize: ICanvasSize;\r\n  mapInfo: IMapInfo;\r\n\r\n  elementCount: number;\r\n\r\n  // Current z values\r\n  wAData: Float64Array; // Stores the current A (or real component.)\r\n  wBData: Float64Array; // Stores the current B (or complex component.)\r\n\r\n  // The number of times each point has been iterated.\r\n  cnts: Uint16Array;\r\n\r\n  // Flag for each point. If set then the point has grown more than 2.\r\n  flags: Uint8Array;\r\n\r\n  //getLinearIndex(x: number, y: number): number;\r\n  getLinearIndex(c: IPoint): number;\r\n  doInterations(iterationCnt: number): boolean;\r\n  getImageData(): Uint8ClampedArray;\r\n  updateImageData(imageData: Uint8ClampedArray): void;\r\n}\r\n\r\nexport class Point implements IPoint {\r\n  constructor(public x: number, public y: number) { }\r\n}\r\n\r\nexport class MapInfo implements IMapInfo {\r\n  constructor(public bottomLeft: IPoint, public topRight: IPoint, public maxInterations: number) {\r\n  }\r\n}\r\n\r\nexport class CanvasSize implements ICanvasSize {\r\n\r\n  constructor(public width: number, public height: number) {\r\n    if (!this.isReasonableExtent(this.width, MAX_CANVAS_WIDTH)) {\r\n      alert('Width is invalid');\r\n    }\r\n    if (!this.isReasonableExtent(this.height, MAX_CANVAS_HEIGHT)) {\r\n      alert('Height is invalid');\r\n    }\r\n  }\r\n\r\n  isReasonableExtent(nVal:number, max:number): boolean {\r\n    return isFinite(nVal) && nVal > 0 && nVal <= max && Math.floor(nVal) === nVal;\r\n  };\r\n}\r\n\r\nexport class MapWorkingData {\r\n\r\n  public elementCount: number;\r\n\r\n  // Current z values\r\n  public wAData: Float64Array; // Stores the current A (or real component.)\r\n  public wBData: Float64Array; // Stores the current B (or complex component.)\r\n\r\n  // The number of times each point has been iterated.\r\n  public cnts: Uint16Array;\r\n\r\n  // Flag for each point. If set then the point has grown more than 2.\r\n  public flags: Uint8Array;\r\n\r\n  public xVals: number[];\r\n  public yVals: number[];\r\n\r\n  constructor(public canvasSize: ICanvasSize, public mapInfo: IMapInfo) {\r\n\r\n    this.elementCount = this.getNumberOfElementsForCanvas(this.canvasSize);\r\n\r\n    this.wAData = new Float64Array(this.elementCount); // All elements now have a value of zero.\r\n    this.wBData = new Float64Array(this.elementCount); // All elements now have a value of zero.\r\n\r\n    this.cnts = new Uint16Array(this.elementCount);\r\n    this.flags = new Uint8Array(this.elementCount);\r\n\r\n    // X coordinates get larger as one moves from the left of the map to  the right.\r\n    this.xVals = this.buildVals(this.canvasSize.width, this.mapInfo.bottomLeft.x, this.mapInfo.topRight.x);\r\n\r\n    // Y coordinates get larger as one moves from the bottom of the map to the top.\r\n    this.yVals = this.buildVals(this.canvasSize.height, this.mapInfo.bottomLeft.y, this.mapInfo.topRight.y);\r\n  }\r\n\r\n  // Calculate the number of elements in our single dimension data array needed to cover the\r\n  // two-dimensional map.\r\n  private getNumberOfElementsForCanvas(cs: ICanvasSize): number {\r\n    return cs.width * cs.height;\r\n  }\r\n\r\n  // Build the array of 'c' values for one dimension of the map.\r\n  private buildVals(canvasExtent: number, start: number, end: number): number[] {\r\n    let result: number[] = new Array<number>(canvasExtent);\r\n\r\n    let mapExtent: number = end - start;\r\n    let unitExtent: number = mapExtent / canvasExtent;\r\n\r\n    var i: number;\r\n    for (i = 0; i < canvasExtent; i++) {\r\n      result[i] = start + (i * unitExtent);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  //public getLinearIndex(x:number, y:number): number {\r\n  //  return x + y * this.canvasSize.width;\r\n  //}\r\n\r\n  // Returns the index to use when accessing wAData, wBData, cnts or flags.\r\n  public getLinearIndex(c:IPoint): number {\r\n    return c.x + c.y * this.canvasSize.width;\r\n  }\r\n\r\n  // Calculates z squared + c\r\n  getNextVal(z: IPoint, c: IPoint): IPoint {\r\n    const result: IPoint = new Point(\r\n      z.x * z.x - z.y * z.y + c.x,\r\n      2 * z.x * z.y + c.y\r\n    );\r\n\r\n    return result;\r\n  }\r\n\r\n  // Returns the square of the magnitude of a complex number where a is the real component and b is the complex component.\r\n  private getAbsSizeSquared(z: IPoint): number {\r\n    const result:number = z.x * z.x + z.y * z.y;\r\n    return result;\r\n  }\r\n\r\n  // Takes the current value of z for a given coordinate,\r\n  // calculates the next value\r\n  // and updates the current value with this next value.\r\n  // If the 'done' flag is set, no update is made.\r\n  //\r\n  // If the magnitude of the new value is greater than 2 (the square of the magnitude > 4) then it sets the 'done' flag\r\n  // Returns the (new) value of the 'done' flag for this coordinate.\r\n  private iterateElement(mapCoordinate:IPoint): boolean {\r\n    const ptr = this.getLinearIndex(mapCoordinate);\r\n\r\n    if (this.flags[ptr]) {\r\n      // This point has been flagged, don't interate.\r\n      return true;\r\n    }\r\n\r\n    const z:IPoint = new Point(this.wAData[ptr], this.wBData[ptr]);\r\n    const c: IPoint = new Point(this.xVals[mapCoordinate.x], this.yVals[mapCoordinate.y]);\r\n\r\n    const newZ = this.getNextVal(z, c);\r\n\r\n    // Store the new value back to our Working Data.\r\n    this.wAData[ptr] = newZ.x;\r\n    this.wBData[ptr] = newZ.y;\r\n\r\n    const aSize = this.getAbsSizeSquared(newZ);\r\n\r\n    // Increment the number of times this point has been iterated.\r\n    this.cnts[ptr] = this.cnts[ptr] + 1;\r\n\r\n    if (aSize > 4) {\r\n      // This point is done.\r\n      this.flags[ptr] = 1;\r\n      return true;\r\n    }\r\n    else {\r\n      // This point is still 'alive'.\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Updates each element by performing a single interation.\r\n  // Returns true if at least one point is not done.\r\n  private iterateAllElementsOnce(): boolean {\r\n\r\n    var result: boolean = false; // Assume all done until one is found that is not done.\r\n\r\n    var i: number;\r\n    var j: number;\r\n\r\n    for (i = 0; i < this.canvasSize.height; i++) {\r\n      for (j = 0; j < this.canvasSize.width; j++) {\r\n        var pointIsDone = this.iterateElement(new Point(j, i));\r\n        \r\n        if (!pointIsDone) result = true;\r\n      }\r\n\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public doInterations(iterationCnt: number): boolean {\r\n    var i: number;\r\n    var alive: boolean = true;\r\n\r\n    for (i = 0; i < iterationCnt && alive; i++) {\r\n      var alive = this.iterateAllElementsOnce();\r\n    }\r\n    return alive;\r\n  }\r\n\r\n  public getImageData(): Uint8ClampedArray {\r\n    const resultLen = 4 * this.elementCount;\r\n    const result: Uint8ClampedArray = new Uint8ClampedArray(resultLen);\r\n\r\n    this.updateImageData(result);\r\n    return result;\r\n  }\r\n\r\n  public updateImageData(imageData: Uint8ClampedArray): void {\r\n\r\n    if (imageData.length != 4 * this.elementCount) {\r\n      console.log(\"The imagedata data does not have the correct number of elements.\");\r\n      return;\r\n    }\r\n\r\n    var i: number;\r\n\r\n    for (i = 0; i < this.elementCount; i++) {\r\n      const inTheSet: boolean = this.flags[i] === 0;\r\n      this.setPixelValueBinary(inTheSet, i * 4, imageData);\r\n    }\r\n  }\r\n  \r\n  private setPixelValueBinary(on: boolean, ptr: number, imageData: Uint8ClampedArray) {\r\n    if (on) {\r\n      // Points within the set are drawn in black.\r\n      imageData[ptr] = 0;\r\n      imageData[ptr + 1] = 0;\r\n      imageData[ptr + 2] = 0;\r\n      imageData[ptr + 3] = 255;\r\n    } else {\r\n      // Points outside the set are drawn in white.\r\n      imageData[ptr] = 255;\r\n      imageData[ptr + 1] = 255;\r\n      imageData[ptr + 2] = 255;\r\n      imageData[ptr + 3] = 255;\r\n    }\r\n  }\r\n\r\n  // Returns a 'regular' linear array of booleans from the flags TypedArray.\r\n  static getFlagData(mapWorkingData: IMapWorkingData): boolean[] {\r\n\r\n    var result: boolean[] = new Array<boolean>(mapWorkingData.elementCount);\r\n\r\n    var i: number;\r\n    for (i = 0; i < result.length; i++) {\r\n      result[i] = mapWorkingData.flags[i] != 0;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}