{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/logger.service.ts","webpack:///./src/app/m-map/m-map-common.ts","webpack:///./src/app/m-map/m-map-params/m-map-params.component.html","webpack:///./src/app/m-map/m-map-params/m-map-params.component.ts","webpack:///./src/app/m-map/m-map.display/m-map.display.component.html","webpack:///./src/app/m-map/m-map.display/m-map.display.component.ts","webpack:///./src/app/m-map/m-map.module.ts","webpack:///./src/app/m-map/m-map.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","\r\n<h2>Map Params Section</h2>\r\n<app-m-map-params></app-m-map-params>\r\n\r\n<h2>Map Output Section</h2>\r\n\r\n  <div style=\"position:relative; width:700px; height:470px; padding:3px 3px 3px 3px; border: 2px solid black\">\r\n    <div style=\"position:relative; width:690px; height:460px; margin:5px\">\r\n      <app-m-map-display></app-m-map-display>\r\n    </div>\r\n  </div>\r\n\r\n","import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { Logger } from './logger.service';\r\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements AfterViewInit, OnInit {\r\n\n  private viewInitialized: boolean;\n\n  constructor(private logger: Logger) {\n\n    this.viewInitialized = false;\r\n  }\n\n  ngOnInit(): void {\r\n    console.log(\"We are inited.\");\r\n  }\n\r\n  ngOnChanges() {\r\n    if (!this.viewInitialized) return;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (!this.viewInitialized) {\r\n      this.viewInitialized = true;\r\n      console.log(\"About to draw from AfterViewInit.\");\r\n    }\r\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n//import { SampleModule } from '../fractalMapLib';\n\nimport { AppComponent } from './app.component';\nimport { Logger } from './logger.service';\n\nimport { MMapModule } from './m-map/m-map.module';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    MMapModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  providers: [Logger],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class Logger {\r\n  log(msg: any) { console.log(msg); }\r\n  error(msg: any) { console.error(msg); }\r\n  warn(msg: any) { console.warn(msg); }\r\n}\r\n","import { element } from \"@angular/core/src/render3/instructions\";\r\nimport * as math from \"mathjs\";\r\n\r\nconst MAX_CANVAS_WIDTH: number = 5000;\r\nconst MAX_CANVAS_HEIGHT: number = 5000;\r\n\r\nexport interface IPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface IMapInfo {\r\n  bottomLeft: IPoint;\r\n  topRight: IPoint;\r\n  maxInterations: number;\r\n}\r\n\r\nexport interface ICanvasSize {\r\n  width: number;\r\n  height: number\r\n}\r\n\r\nexport interface IMapWorkingData {\r\n  canvasSize: ICanvasSize;\r\n  mapInfo: IMapInfo;\r\n  sectionAnchor: IPoint;\r\n\r\n  elementCount: number;\r\n\r\n  // Current z values\r\n  wAData: Float64Array; // Stores the current A (or real component.)\r\n  wBData: Float64Array; // Stores the current B (or complex component.)\r\n\r\n  xVals: number[];\r\n  yVals: number[];\r\n\r\n  // The number of times each point has been iterated.\r\n  cnts: Uint16Array;\r\n\r\n  // Flag for each point. If set then the point has grown more than 2.\r\n  flags: Uint8Array;\r\n\r\n  curInterations: number;\r\n\r\n  //pixelData: Uint8ClampedArray;\r\n\r\n  colorMap: ColorMap;\r\n\r\n  //getLinearIndex(x: number, y: number): number;\r\n  getLinearIndex(c: IPoint): number;\r\n  doInterationsForAll(iterCount: number): boolean;\r\n  doInterationsForLine(iterCount: number, y: number): boolean;\r\n\r\n  //getImageData(): ImageData;\r\n  getPixelData(): Uint8ClampedArray;\r\n  getImageDataForLine(y: number): ImageData;\r\n\r\n  updateImageData(imgData: Uint8ClampedArray): void;\r\n}\r\n\r\nexport class Point implements IPoint {\r\n  constructor(public x: number, public y: number) { }\r\n}\r\n\r\nexport class CanvasSize implements ICanvasSize {\r\n\r\n  constructor(public width: number, public height: number) {\r\n    if (!this.isReasonableExtent(this.width, MAX_CANVAS_WIDTH)) {\r\n      alert('Width is invalid');\r\n    }\r\n    if (!this.isReasonableExtent(this.height, MAX_CANVAS_HEIGHT)) {\r\n      alert('Height is invalid');\r\n    }\r\n  }\r\n\r\n  isReasonableExtent(nVal:number, max:number): boolean {\r\n    return isFinite(nVal) && nVal > 0 && nVal <= max && Math.floor(nVal) === nVal;\r\n  }\r\n}\r\n\r\nexport class MapInfo implements IMapInfo {\r\n  constructor(public bottomLeft: IPoint, public topRight: IPoint, public maxInterations: number) {\r\n  }\r\n}\r\n\r\nexport class MapWorkingData implements IMapWorkingData {\r\n\r\n  public elementCount: number;\r\n\r\n  // Current z values\r\n  public wAData: Float64Array; // Stores the current A (or real component.)\r\n  public wBData: Float64Array; // Stores the current B (or complex component.)\r\n\r\n  // The number of times each point has been iterated.\r\n  public cnts: Uint16Array;\r\n\r\n  // Flag for each point. If set then the point has grown more than 2.\r\n  public flags: Uint8Array;\r\n\r\n  public xVals: number[];\r\n  public yVals: number[];\r\n\r\n  public curInterations: number;\r\n\r\n  //public pixelData: Uint8ClampedArray;\r\n\r\n  constructor(public canvasSize: ICanvasSize, public mapInfo: IMapInfo, public colorMap: ColorMap, public sectionAnchor: IPoint) {\r\n\r\n    this.elementCount = this.getNumberOfElementsForCanvas(this.canvasSize);\r\n\r\n    this.wAData = new Float64Array(this.elementCount); // All elements now have a value of zero.\r\n    this.wBData = new Float64Array(this.elementCount); // All elements now have a value of zero.\r\n\r\n    this.cnts = new Uint16Array(this.elementCount);\r\n    this.flags = new Uint8Array(this.elementCount);\r\n\r\n    // X coordinates get larger as one moves from the left of the map to  the right.\r\n    this.xVals = MapWorkingData.buildVals(this.canvasSize.width, this.mapInfo.bottomLeft.x, this.mapInfo.topRight.x);\r\n\r\n    // Y coordinates get larger as one moves from the bottom of the map to the top.\r\n    // But ImageData \"blocks\" are drawn from top to bottom.\r\n    //this.yVals = MapWorkingData.buildVals(this.canvasSize.height, this.mapInfo.bottomLeft.y, this.mapInfo.topRight.y);\r\n\r\n    // if we only have a single section, then we must reverse the y values.\r\n    this.yVals = MapWorkingData.buildValsRev(this.canvasSize.height, this.mapInfo.bottomLeft.y, this.mapInfo.topRight.y);\r\n\r\n    this.curInterations = 0;\r\n\r\n    //this.pixelData = new Uint8ClampedArray(this.elementCount * 4);\r\n  }\r\n\r\n  // Calculate the number of elements in our single dimension data array needed to cover the\r\n  // two-dimensional map.\r\n  private getNumberOfElementsForCanvas(cs: ICanvasSize): number {\r\n    return cs.width * cs.height;\r\n  }\r\n\r\n  // Build the array of 'c' values for one dimension of the map.\r\n  static buildVals(canvasExtent: number, start: number, end: number): number[] {\r\n    let result: number[] = new Array<number>(canvasExtent);\r\n\r\n    let mapExtent: number = end - start;\r\n    let unitExtent: number = mapExtent / canvasExtent;\r\n\r\n    var i: number;\r\n    for (i = 0; i < canvasExtent; i++) {\r\n      result[i] = start + i * unitExtent;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Build the array of 'c' values for one dimension of the map.\r\n  static buildValsRev(canvasExtent: number, start: number, end: number): number[] {\r\n    let result: number[] = new Array<number>(canvasExtent);\r\n\r\n    let mapExtent: number = end - start;\r\n    let unitExtent: number = mapExtent / canvasExtent;\r\n\r\n    var i: number;\r\n    var ptr: number = 0;\r\n    for (i = canvasExtent - 1; i > -1; i--) {\r\n      result[ptr++] = start + i * unitExtent;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  //public getLinearIndex(x:number, y:number): number {\r\n  //  return x + y * this.canvasSize.width;\r\n  //}\r\n\r\n  // Returns the index to use when accessing wAData, wBData, cnts or flags.\r\n  public getLinearIndex(c: IPoint): number {\r\n    return c.x + c.y * this.canvasSize.width;\r\n  }\r\n\r\n  // Calculates z squared + c\r\n  getNextVal(z: IPoint, c: IPoint): IPoint {\r\n    const result: IPoint = new Point(\r\n      z.x * z.x - z.y * z.y + c.x,\r\n      2 * z.x * z.y + c.y\r\n    );\r\n\r\n    return result;\r\n  }\r\n\r\n  // Returns the square of the magnitude of a complex number where a is the real component and b is the complex component.\r\n  private getAbsSizeSquared(z: IPoint): number {\r\n    const result:number = z.x * z.x + z.y * z.y;\r\n    return result;\r\n  }\r\n\r\n  // Takes the current value of z for a given coordinate,\r\n  // calculates the next value\r\n  // and updates the current value with this next value.\r\n  // If the 'done' flag is set, no update is made.\r\n  //\r\n  // If the magnitude of the new value is greater than 2 (the square of the magnitude > 4) then it sets the 'done' flag\r\n  // Returns the (new) value of the 'done' flag for this coordinate.\r\n  private iterateElement(mapCoordinate:IPoint, iterCount:number): boolean {\r\n    const ptr = this.getLinearIndex(mapCoordinate);\r\n\r\n    if (this.flags[ptr] === 1) {\r\n      // This point has been flagged, don't iterate.\r\n      return true;\r\n    }\r\n\r\n    let z:IPoint = new Point(this.wAData[ptr], this.wBData[ptr]);\r\n    const c: IPoint = new Point(this.xVals[mapCoordinate.x], this.yVals[mapCoordinate.y]);\r\n\r\n    let cntr: number;\r\n\r\n    for (cntr = 0; cntr < iterCount; cntr++) {\r\n      z = this.getNextVal(z, c);\r\n\r\n      if (this.getAbsSizeSquared(z) > 4) {\r\n        // This point is done.\r\n        this.flags[ptr] = 1;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Store the new value back to our Working Data.\r\n    this.wAData[ptr] = z.x;\r\n    this.wBData[ptr] = z.y;\r\n\r\n    // Increment the number of times this point has been iterated.\r\n    this.cnts[ptr] = this.cnts[ptr] + cntr;\r\n\r\n    return this.flags[ptr] === 1;\r\n  }\r\n\r\n  // Updates each element for a given line by performing a single interation.\r\n  // Returns true if at least one point is not done.\r\n  public doInterationsForLine(iterCount: number, y: number): boolean {\r\n\r\n    let stillAlive: boolean = false; // Assume all done until one is found that is not done.\r\n\r\n    let x: number;\r\n\r\n    for (x = 0; x < this.canvasSize.width; x++) {\r\n      let pointIsDone = this.iterateElement(new Point(x, y), iterCount);\r\n      if (!pointIsDone) stillAlive = true;\r\n    }\r\n\r\n    return stillAlive;\r\n  }\r\n\r\n  // Updates each element by performing a single interation.\r\n  // Returns true if at least one point is not done.\r\n  public doInterationsForAll(iterCount: number): boolean {\r\n\r\n    let stillAlive: boolean = false; // Assume all done until one is found that is not done.\r\n\r\n    let x: number;\r\n    let y: number;\r\n\r\n    for (y = 0; y < this.canvasSize.height; y++) {\r\n      for (x = 0; x < this.canvasSize.width; x++) {\r\n        let pointIsDone = this.iterateElement(new Point(x, y), iterCount);\r\n        if (!pointIsDone) stillAlive = true;\r\n      }\r\n    }\r\n    return stillAlive;\r\n  }\r\n\r\n  // Divides the specified MapWorking data into the specified vertical sections, each having the width of the original Map.\r\n  static getWorkingDataSections(canvasSize: ICanvasSize, mapInfo: IMapInfo, colorMap: ColorMap, numberOfSections: number): IMapWorkingData[] {\r\n    let result: IMapWorkingData[] = Array<IMapWorkingData>(numberOfSections);\r\n\r\n    // Calculate the heigth of each section, rounded down to the nearest whole number.\r\n    let sectionHeight = canvasSize.height / numberOfSections;\r\n    let sectionHeightWN = parseInt(sectionHeight.toString(), 10);\r\n\r\n    // Calculate the height of the last section.\r\n    let lastSectionHeight: number = canvasSize.height - sectionHeightWN * (numberOfSections - 1);\r\n\r\n    let left = mapInfo.bottomLeft.x;\r\n    let right = mapInfo.topRight.x;\r\n\r\n    let bottomPtr = 0;\r\n    let topPtr = sectionHeightWN;\r\n\r\n    let yVals: number[];\r\n    yVals = MapWorkingData.buildValsRev(canvasSize.height, mapInfo.bottomLeft.y, mapInfo.topRight.y);\r\n\r\n    let ptr: number = 0;\r\n\r\n    // Build all but the last section.\r\n    for (; ptr < numberOfSections - 1; ptr++) {\r\n\r\n      let secCanvasSize = new CanvasSize(canvasSize.width, sectionHeightWN);\r\n\r\n      let secBottom = yVals[bottomPtr];\r\n      let secTop = yVals[topPtr];\r\n\r\n      let secBotLeft = new Point(left, secBottom);\r\n      let secTopRight = new Point(right, secTop);\r\n\r\n      let secMapInfo = new MapInfo(secBotLeft, secTopRight, mapInfo.maxInterations);\r\n\r\n      let yOffset = ptr * sectionHeightWN;\r\n      let secAnchor: IPoint = new Point(0, yOffset);\r\n      result[ptr] = new MapWorkingData(secCanvasSize, secMapInfo, colorMap, secAnchor);\r\n\r\n      // The next bottomPtr should point to one immediately following the last top.\r\n      bottomPtr = topPtr + 1;\r\n      topPtr += sectionHeightWN;\r\n    }\r\n\r\n    // Build the last section.\r\n    let secCanvasSize = new CanvasSize(canvasSize.width, lastSectionHeight);\r\n\r\n    let secBottom = yVals[bottomPtr];\r\n    let secBotLeft = new Point(left, secBottom);\r\n\r\n    topPtr = yVals.length - 1;\r\n    let secTop = yVals[topPtr];\r\n    let secTopRight = new Point(right, secTop);\r\n\r\n    let secMapInfo = new MapInfo(secBotLeft, secTopRight, mapInfo.maxInterations);\r\n\r\n    let yOffset = ptr * sectionHeightWN;\r\n    let secAnchor: IPoint = new Point(0, yOffset);\r\n\r\n    result[ptr] = new MapWorkingData(secCanvasSize, secMapInfo, colorMap, secAnchor);\r\n\r\n    return result;\r\n  }\r\n\r\n  public getPixelData(): Uint8ClampedArray {\r\n\r\n    const pixelData = new Uint8ClampedArray(this.elementCount * 4);\r\n\r\n    //const pixelData = new Uint32Array(this.elementCount);\r\n\r\n    this.updateImageData(pixelData);\r\n\r\n    //const imgData = new Uint8ClampedArray(pixelData.buffer);\r\n    //const imageData = new ImageData(pixelData, this.canvasSize.width, this.canvasSize.height);\r\n\r\n    //return imageData;\r\n    return pixelData;\r\n  }\r\n \r\n  public updateImageData(imgData: Uint8ClampedArray): void {\r\n    if (imgData.length !== this.elementCount * 4) {\r\n      console.log(\"The imgData data does not have the correct number of elements.\");\r\n      return;\r\n    }\r\n\r\n    const pixelData = new Uint32Array(imgData.buffer);\r\n\r\n    let colorMap: ColorMap = this.colorMap;\r\n\r\n    let i: number = 0;\r\n    //let colorNums = new ColorNumbers();\r\n\r\n    //for (; i < this.elementCount; i++) {\r\n    //  const cnt = this.cnts[i];\r\n    //  this.setPixelValueFromCount(cnt, i, pixelData, colorNums);\r\n    //}\r\n\r\n    for (; i < this.elementCount; i++) {\r\n      const cnt = this.cnts[i];\r\n      pixelData[i] = colorMap.getColor(cnt);\r\n    }\r\n  }\r\n  \r\n  private setPixelValueBinaryByInt(on: boolean, ptr: number, imageData: Uint32Array, colorNums: ColorNumbers) {\r\n    if (on) {\r\n      // Points within the set are drawn in black.\r\n      imageData[ptr] = colorNums.red;\r\n    } else {\r\n      // Points outside the set are drawn in white.\r\n      let tt: number = colorNums.white;\r\n\r\n      //tt = ‭math.pow(2, 32);\r\n\r\n      imageData[ptr] = tt; //math.pow(2, 32).valueOf() as number;\r\n    }\r\n  }\r\n\r\n  private setPixelValueFromCount(cnt: number, ptr: number, imageData: Uint32Array, colorNums: ColorNumbers) {\r\n\r\n    let cNum: number;\r\n\r\n    if (cnt < 10) {\r\n      cNum = colorNums.white;\r\n    }\r\n    else if (cnt < 20) {\r\n      cNum = colorNums.red;\r\n    }\r\n    else if (cnt < 50) {\r\n      cNum = colorNums.green;\r\n    }\r\n    else if (cnt < 200) {\r\n      cNum = colorNums.blue;\r\n    }\r\n    else {\r\n      cNum = colorNums.black;\r\n    }\r\n\r\n    imageData[ptr] = cNum;\r\n  }\r\n\r\n  public getImageDataForLine(y: number): ImageData {\r\n    const imageData = new ImageData(this.canvasSize.width, 1);\r\n    this.updateImageDataForLine(imageData, y);\r\n    return imageData;\r\n  }\r\n\r\n  private updateImageDataForLine(imageData: ImageData, y: number): void {\r\n    let data: Uint8ClampedArray = imageData.data;\r\n    if (data.length !== 4 * this.canvasSize.width) {\r\n      console.log(\"The imagedata data does not have the correct number of elements.\");\r\n      return;\r\n    }\r\n\r\n    let start: number = this.getLinearIndex(new Point(0, y));\r\n    let end: number = start + this.canvasSize.width;\r\n\r\n    let i: number;\r\n\r\n    for (i = start; i < end; i++) {\r\n      const inTheSet: boolean = this.flags[i] === 0;\r\n      this.setPixelValueBinary(inTheSet, i * 4, data);\r\n    }\r\n  }\r\n\r\n  private updateImageDataOld(imageData: ImageData): void {\r\n    let data: Uint8ClampedArray = imageData.data;\r\n    if (data.length !== 4 * this.elementCount) {\r\n      console.log(\"The imagedata data does not have the correct number of elements.\");\r\n      return;\r\n    }\r\n\r\n    let i: number = 0;\r\n\r\n    for (; i < this.elementCount; i++) {\r\n      const inTheSet: boolean = this.flags[i] === 0;\r\n      this.setPixelValueBinary(inTheSet, i * 4, data);\r\n    }\r\n  }\r\n\r\n  private setPixelValueBinary(on: boolean, ptr: number, imageData: Uint8ClampedArray) {\r\n    if (on) {\r\n      // Points within the set are drawn in black.\r\n      imageData[ptr] = 0;\r\n      imageData[ptr + 1] = 0;\r\n      imageData[ptr + 2] = 0;\r\n      imageData[ptr + 3] = 255;\r\n    } else {\r\n      // Points outside the set are drawn in white.\r\n      imageData[ptr] = 255;\r\n      imageData[ptr + 1] = 255;\r\n      imageData[ptr + 2] = 255;\r\n      imageData[ptr + 3] = 255;\r\n    }\r\n  }\r\n\r\n  public getImageDataOld(): ImageData {\r\n    const imageData = new ImageData(this.canvasSize.width, this.canvasSize.height);\r\n    this.updateImageDataOld(imageData);\r\n    return imageData;\r\n  }\r\n                                                                                            \r\n  // Returns a 'regular' linear array of booleans from the flags TypedArray.\r\n  private getFlagData(mapWorkingData: IMapWorkingData): boolean[] {\r\n\r\n    var result: boolean[] = new Array<boolean>(mapWorkingData.elementCount);\r\n\r\n    var i: number;\r\n    for (i = 0; i < result.length; i++) {\r\n      result[i] = mapWorkingData.flags[i] !== 0;\r\n    }\r\n\r\n    return result;\r\n  }\r\n} // End Class MapWorkingData\r\n\r\nexport class ColorMapEntry {\r\n  constructor(public cutOff: number, public colorNum: number) {\r\n  }\r\n}\r\n\r\nexport class ColorMap {\r\n\r\n  constructor(public ranges: ColorMapEntry[], public highColor: number) { }\r\n\r\n  public static FromTypedArrays(cutOffs: Uint16Array, colorNums: Uint32Array, highColor: number): ColorMap {\r\n    let ranges: ColorMapEntry[] = new Array<ColorMapEntry>(cutOffs.length);\r\n    let i: number = 0;\r\n\r\n    for (; i < cutOffs.length; i++) {\r\n      ranges[i] = new ColorMapEntry(cutOffs[i], colorNums[i]);\r\n    }\r\n\r\n    let result: ColorMap = new ColorMap(ranges, highColor);\r\n\r\n    return result;\r\n  }\r\n\r\n  public getColor(countValue: number): number {\r\n    let result: number;\r\n    let index = this.searchInsert(countValue);\r\n    if (index === this.ranges.length) {\r\n      result = this.highColor;\r\n    }\r\n    else {\r\n      result = this.ranges[index].colorNum;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private searchInsert(countVal: number): number {\r\n\r\n    let start = 0;\r\n    let end = this.ranges.length - 1;\r\n    let index = Math.floor((end - start) / 2) + start;\r\n\r\n    if (countVal > this.ranges[this.ranges.length - 1].cutOff) {\r\n      // The target is beyond the end of this array.\r\n      index = this.ranges.length;\r\n    }\r\n    else {\r\n      // Start in middle, divide and conquer.\r\n      while (start < end) {\r\n        // Get value at current index.\r\n        let value: number = this.ranges[index].cutOff;\r\n\r\n        if (value === countVal) {\r\n          // Found our target.\r\n          //result = index;\r\n          break;\r\n        }\r\n        else if (countVal < value) {\r\n          // Target is lower in array, move the index halfway down.\r\n          end = index;\r\n        }\r\n        else {\r\n          // Target is higher in array, move the index halfway up.\r\n          start = index + 1;\r\n        }\r\n\r\n        // Get next mid-point.\r\n        index = Math.floor((end - start) / 2) + start;\r\n      }\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  public GetCutOffs(): Uint16Array {\r\n    let result = new Uint16Array(this.ranges.length);\r\n    let i: number = 0;\r\n\r\n    for (; i < this.ranges.length; i++) {\r\n      result[i] = this.ranges[i].cutOff;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public GetColorNums(): Uint32Array {\r\n    let result = new Uint32Array(this.ranges.length);\r\n    let i: number = 0;\r\n\r\n    for (; i < this.ranges.length; i++) {\r\n      result[i] = this.ranges[i].colorNum;\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport class ColorNumbers {\r\n\r\n  black: number = 65536 * 65280; // FF00 0000\r\n  white: number; // = -1 + 65536 * 65536; // FFFF FFFF\r\n  red: number;\r\n  green: number;\r\n  blue: number;\r\n\r\n  constructor() {\r\n    this.white = this.getColorNumber(255, 255, 255);\r\n    this.red = this.getColorNumber(255, 0, 0);\r\n    this.green = this.getColorNumber(0, 255, 0);\r\n    this.blue = this.getColorNumber(0, 0, 255);\r\n  }\r\n\r\n  private getColorNumber(r: number, g: number, b: number): number {\r\n\r\n    if (r > 255 || r < 0) throw new RangeError('R must be between 0 and 255.');\r\n    if (g > 255 || g < 0) throw new RangeError('G must be between 0 and 255.');\r\n    if (b > 255 || b < 0) throw new RangeError('B must be between 0 and 255.');\r\n\r\n    let result: number = this.black;\r\n    result += b << 16;\r\n    result += g << 8;\r\n    result += r;\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\n// ---- WebWorker Message Interfaces ----\r\n\r\nexport interface IWebWorkerMessage {\r\n  messageKind: string;\r\n}\r\n\r\nexport interface IWebWorkerStartRequest extends IWebWorkerMessage {\r\n  canvasSize: ICanvasSize;\r\n  mapInfo: IMapInfo;\r\n  colorMap: ColorMap;\r\n  sectionAnchor: IPoint;\r\n  sectionNumber: number;\r\n}\r\n\r\nexport interface IWebWorkerIterateRequest extends IWebWorkerMessage {\r\n  iterateCount: number;\r\n}\r\n\r\nexport interface IWebWorkerImageDataRequest extends IWebWorkerMessage {\r\n  pixelData: Uint8ClampedArray;\r\n}\r\n\r\nexport interface IWebWorkerImageDataResponse extends IWebWorkerMessage {\r\n  sectionNumber: number;\r\n  pixelData: Uint8ClampedArray;\r\n\r\n  getImageData(cs: ICanvasSize): ImageData;\r\n}\r\n\r\nexport interface IWebWorkerAliveFlagsRequest extends IWebWorkerMessage {\r\n  flagData: Uint8Array;\r\n}\r\n\r\nexport interface IWebWorkerAliveFlagsResponse extends IWebWorkerMessage {\r\n  sectionNumber: number;\r\n  flagData: Uint8Array;\r\n\r\n  getAliveFlags(): boolean[];\r\n}\r\n\r\nexport interface IWebWorkerIterCountsRequest extends IWebWorkerMessage {\r\n  iterCountsData: Uint16Array;\r\n}\r\n\r\nexport interface IWebWorkerIterCountsResponse extends IWebWorkerMessage {\r\n  sectionNumber: number;\r\n  iterCountsData: Uint16Array;\r\n}\r\n\r\nexport interface IWebWorkerUpdateColorMapRequest extends IWebWorkerMessage {\r\n  cutOffs: Uint16Array;\r\n  colorNums: Uint32Array;\r\n  highColorNum: number;\r\n\r\n  getColorMap(): ColorMap;\r\n}\r\n\r\n// -- WebWorker Message Implementations\r\n\r\nexport class WebWorkerMessage implements IWebWorkerMessage {\r\n  constructor(public messageKind: string) { }\r\n\r\n  static FromEventData(data: any): IWebWorkerMessage {\r\n    return new WebWorkerMessage(data.messageKind || data || 'no data');\r\n  }\r\n}\r\n\r\nexport class WebWorkerStartRequest implements IWebWorkerStartRequest {\r\n\r\n  constructor(\r\n    public messageKind: string,\r\n    public canvasSize: ICanvasSize,\r\n    public mapInfo: IMapInfo,\r\n    public colorMap: ColorMap,\r\n    public sectionAnchor: IPoint,\r\n    public sectionNumber: number\r\n  ) { }\r\n\r\n  static FromEventData(data: any): IWebWorkerStartRequest {\r\n    let result = new WebWorkerStartRequest(\r\n      data.messageKind,\r\n      data.canvasSize,\r\n      data.mapInfo,\r\n      data.colorMap,\r\n      data.sectionAnchor,\r\n      data.sectionNumber\r\n    );\r\n    return result;\r\n  }\r\n\r\n  static CreateRequest(mapWorkingData: IMapWorkingData, sectionNumber: number): IWebWorkerStartRequest {\r\n    let result = new WebWorkerStartRequest(\r\n      'Start',\r\n      mapWorkingData.canvasSize,\r\n      mapWorkingData.mapInfo,\r\n      mapWorkingData.colorMap,\r\n      mapWorkingData.sectionAnchor,\r\n      sectionNumber\r\n    );\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport class WebWorkerIterateRequest implements IWebWorkerIterateRequest {\r\n  constructor(public messageKind: string, public iterateCount: number) { }\r\n\r\n  static FromEventData(data: any): IWebWorkerIterateRequest {\r\n    let result = new WebWorkerIterateRequest(data.messageKind,  data.iterateCount);\r\n    return result;\r\n  }\r\n\r\n  static CreateRequest(iterateCount: number): IWebWorkerIterateRequest {\r\n    let result = new WebWorkerIterateRequest('Iterate', iterateCount);\r\n    return result;\r\n  }\r\n}\r\n\r\nexport class WebWorkerImageDataRequest implements IWebWorkerImageDataRequest {\r\n  constructor(public messageKind: string, public pixelData: Uint8ClampedArray) { }\r\n\r\n  static FromEventData(data: any): IWebWorkerImageDataRequest {\r\n    let result = new WebWorkerImageDataRequest(data.messageKind, data.pixelData);\r\n    return result;\r\n  }\r\n\r\n  static CreateRequest(pixelData: Uint8ClampedArray): IWebWorkerImageDataRequest {\r\n    let result = new WebWorkerImageDataRequest('GetImageData', pixelData);\r\n    return result;\r\n  }\r\n}\r\n\r\nexport class WebWorkerImageDataResponse implements IWebWorkerImageDataResponse {\r\n\r\n  constructor(public messageKind: string, public sectionNumber: number, public pixelData: Uint8ClampedArray) { }\r\n\r\n  static FromEventData(data: any): IWebWorkerImageDataResponse {\r\n    let result = new WebWorkerImageDataResponse(data.messageKind, data.sectionNumber, data.pixelData);\r\n\r\n    return result;\r\n  }\r\n\r\n  static CreateResponse(sectionNumber: number, pixelData: Uint8ClampedArray): IWebWorkerImageDataResponse {\r\n    let result = new WebWorkerImageDataResponse(\"ImageDataResponse\", sectionNumber, pixelData);\r\n    return result;\r\n  }\r\n\r\n  public getImageData(cs: ICanvasSize): ImageData {\r\n    let result: ImageData = null;\r\n\r\n    //if (this.pixelData) {\r\n      let pixelCount = this.pixelData.length / 4;\r\n      if (pixelCount !== cs.width * cs.height) {\r\n        console.log('The image data being returned is not the correct size for our canvas.');\r\n      }\r\n      result = new ImageData(this.pixelData, cs.width, cs.height);\r\n    //}\r\n    return result;\r\n  }\r\n}\r\n\r\nexport class WebWorkerAliveFlagsRequest implements IWebWorkerAliveFlagsRequest {\r\n  constructor(public messageKind: string, public flagData: Uint8Array) { }\r\n\r\n  static FromEventData(data: any): IWebWorkerAliveFlagsRequest {\r\n    let result = new WebWorkerAliveFlagsRequest(data.messageKind, data.flagData);\r\n    return result;\r\n  }\r\n\r\n  static CreateRequest(flagData: Uint8Array): IWebWorkerAliveFlagsRequest {\r\n    let result = new WebWorkerAliveFlagsRequest('GetAliveFlags', flagData);\r\n    return result;\r\n  }\r\n}\r\n\r\nexport class WebWorkerAliveFlagsResponse implements IWebWorkerAliveFlagsResponse {  \r\n\r\n  constructor(public messageKind: string, public sectionNumber: number, public flagData: Uint8Array) { }\r\n\r\n  static FromEventData(data: any): IWebWorkerImageDataResponse {\r\n    let result = new WebWorkerImageDataResponse(data.messageKind, data.sectionNumber, data.flagData);\r\n\r\n    return result;\r\n  }\r\n\r\n  static CreateResponse(sectionNumber: number, flagData: Uint8Array): IWebWorkerAliveFlagsResponse {\r\n    let result = new WebWorkerAliveFlagsResponse(\"AliveFlagResults\", sectionNumber, flagData);\r\n    return result;\r\n  }\r\n\r\n  public getAliveFlags(): boolean[] {\r\n    let result: boolean[] = new Array<boolean>(this.flagData.length);\r\n\r\n    let ptr: number = 0;\r\n    for (; ptr < this.flagData.length; ptr++) {\r\n      result[ptr] = this.flagData[ptr] !== 0;\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport class WebWorkerIterCountsRequest implements IWebWorkerIterCountsRequest {\r\n  constructor(public messageKind: string, public iterCountsData: Uint16Array) { }\r\n\r\n  static FromEventData(data: any): IWebWorkerAliveFlagsRequest {\r\n    let result = new WebWorkerAliveFlagsRequest(data.messageKind, data.flagData);\r\n    return result;\r\n  }\r\n\r\n  static CreateRequest(flagData: Uint8Array): IWebWorkerAliveFlagsRequest {\r\n    let result = new WebWorkerAliveFlagsRequest('GetIterCounts', flagData);\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\nexport class WebWorkerIterCountsResponse implements IWebWorkerIterCountsResponse {\r\n  constructor(public messageKind: string, public sectionNumber: number, public iterCountsData: Uint16Array) { }\r\n\r\n  static FromEventData(data: any): IWebWorkerIterCountsResponse {\r\n    let result = new WebWorkerIterCountsResponse(data.messageKind, data.sectionNumber, data.iterCountsData);\r\n\r\n    return result;\r\n  }\r\n  \r\n  static CreateResponse(sectionNumber: number, iterCountsData: Uint16Array): IWebWorkerIterCountsResponse {\r\n    let result = new WebWorkerIterCountsResponse(\"IterCountsResults\", sectionNumber, iterCountsData);\r\n    return result;\r\n  }\r\n}\r\n\r\nexport class WebWorkerUpdateColorMapRequest implements IWebWorkerUpdateColorMapRequest {\r\n  constructor(public messageKind: string, public cutOffs: Uint16Array, public colorNums: Uint32Array, public highColorNum: number) { }\r\n\r\n  static FromEventData(data: any): IWebWorkerUpdateColorMapRequest {\r\n    let result = new WebWorkerUpdateColorMapRequest(data.messageKind, data.cutOffs, data.colorNums, data.highColor);\r\n\r\n    return result;\r\n  }\r\n\r\n  static CreateRequest(colorMap: ColorMap): IWebWorkerUpdateColorMapRequest {\r\n\r\n    let cutOffs = colorMap.GetCutOffs();\r\n    let colorNums = colorMap.GetColorNums();\r\n\r\n    let result = new WebWorkerUpdateColorMapRequest(\"UpdateColorMap\", cutOffs, colorNums, colorMap.highColor);\r\n    return result;\r\n  }\r\n\r\n  public getColorMap(): ColorMap {\r\n    let result: ColorMap = ColorMap.FromTypedArrays(this.cutOffs, this.colorNums, this.highColorNum);\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\n// Only used when the javascript produced from compiling this TypeScript is used to create worker.js\r\n\r\nvar mapWorkingData: IMapWorkingData = null;\r\nvar sectionNumber: number = 0;\r\n\r\n// Handles messages sent from the window that started this web worker.\r\nonmessage = function (e) {\r\n\r\n  var pixelData: Uint8ClampedArray;\r\n  var imageData: ImageData;\r\n  var imageDataResponse: IWebWorkerImageDataResponse;\r\n\r\n  //console.log('Worker received message: ' + e.data + '.');\r\n  let plainMsg: IWebWorkerMessage = WebWorkerMessage.FromEventData(e.data);\r\n\r\n  if (plainMsg.messageKind === 'Start') {\r\n    let startMsg = WebWorkerStartRequest.FromEventData(e.data);\r\n    mapWorkingData = new MapWorkingData(startMsg.canvasSize, startMsg.mapInfo, startMsg.colorMap, startMsg.sectionAnchor);\r\n    sectionNumber = startMsg.sectionNumber;\r\n    console.log('Worker created MapWorkingData with element count = ' + mapWorkingData.elementCount);\r\n\r\n    let responseMsg = new WebWorkerMessage('StartResponse');\r\n    console.log('Posting ' + responseMsg.messageKind + ' back to main script');\r\n    self.postMessage(responseMsg, \"*\");\r\n  }\r\n  else if (plainMsg.messageKind === 'Iterate') {\r\n    let iterateRequestMsg = WebWorkerIterateRequest.FromEventData(e.data);\r\n    let iterCount = iterateRequestMsg.iterateCount;\r\n    mapWorkingData.doInterationsForAll(iterCount);\r\n    pixelData = mapWorkingData.getPixelData();\r\n\r\n    imageDataResponse = WebWorkerImageDataResponse.CreateResponse(sectionNumber, pixelData);\r\n\r\n    //console.log('Posting ' + workerResult.messageKind + ' back to main script');\r\n    self.postMessage(imageDataResponse, \"*\", [imageData.data.buffer]);\r\n  }\r\n  else if (plainMsg.messageKind === 'GetImageData') {\r\n    mapWorkingData.doInterationsForAll(1);\r\n\r\n    let dataRequest = WebWorkerImageDataRequest.FromEventData(e.data);\r\n\r\n    pixelData = dataRequest.pixelData;\r\n    mapWorkingData.updateImageData(pixelData);\r\n\r\n    imageDataResponse = WebWorkerImageDataResponse.CreateResponse(sectionNumber, pixelData);\r\n\r\n    //console.log('Posting ' + workerResult.messageKind + ' back to main script');\r\n    self.postMessage(imageDataResponse, \"*\", [pixelData.buffer]);\r\n  }\r\n  else if (plainMsg.messageKind === \"UpdateColorMap\") {\r\n    let upColorMapReq = WebWorkerUpdateColorMapRequest.FromEventData(e.data);\r\n\r\n    mapWorkingData.colorMap = upColorMapReq.getColorMap();\r\n    console.log('WebWorker received an UpdateColorMapRequest with ' + mapWorkingData.colorMap.ranges.length + ' entries.');\r\n  }\r\n  else {\r\n    console.log('Received unknown message kind: ' + plainMsg.messageKind);\r\n  }\r\n\r\n\r\n};\r\n\r\n\r\n\r\n\r\n","<p>\n  m-map-params works!\n</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-m-map-params',\n  templateUrl: './m-map-params.component.html',\n  styleUrls: ['./m-map-params.component.css']\n})\nexport class MMapParamsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<!-- make the canvas completely fill it's parent. -->\r\n<canvas #myCanvas style=\"position:absolute; width:100%; height:100%;\" ></canvas>\r\n","import { Component, OnInit, AfterViewInit, ElementRef, ViewChild, Input } from '@angular/core';\nimport { Logger } from '../../logger.service';\r\n\r\nimport {\r\n  IPoint, Point, ICanvasSize, CanvasSize,\n  IMapInfo, MapInfo, IMapWorkingData, MapWorkingData,\r\n  WebWorkerImageDataResponse, WebWorkerMessage, WebWorkerStartRequest, WebWorkerImageDataRequest, WebWorkerIterateRequest, ColorMap, ColorMapEntry, ColorNumbers\r\n} from '../m-map-common';\n\nimport { MMapService } from '../m-map.service';\r\n\n@Component({\n  selector: 'app-m-map-display',\n  templateUrl: './m-map.display.component.html',\n  styleUrls: ['./m-map.display.component.css']\n  //,\n  //inputs: ['canvasWidth', 'canvasHeight']\n})\nexport class MMapDisplayComponent implements AfterViewInit, OnInit {\r\n\r\n  //@Input('canvas-width') canvasWidth: number;\r\n  //@Input('canvas-height') canvasHeight: number;\r\n\r\n  @ViewChild('myCanvas') canvasRef: ElementRef;\n\n  public alive: boolean;\n\n  private viewInitialized: boolean;\n  private componentInitialized: boolean;\n  private canvasSize: ICanvasSize;\n  private mapInfo: IMapInfo;\n\n  // Array of WebWorkers\n  private workers: Worker[];\n  private numberOfSections: number;\n  private sections: IMapWorkingData[];\n\n  private useWorkers: boolean;\n  private iterationsPerStep: number;\n\n  private colorMap: ColorMap;\n\n  constructor(private logger: Logger, private mService: MMapService) {\n    this.componentInitialized = false;\n    this.viewInitialized = false;\r\n\r\n    // Define our MapInfo -- will be provided as input soon.\r\n    //const bottomLeft: IPoint = new Point(-2, -1);\n    //const topRight: IPoint = new Point(1, 1);\n\n    const bottomLeft: IPoint = new Point(-0.45, 0.5);\n    const topRight: IPoint = new Point(0.3, 1);\n\n    this.iterationsPerStep = 5;\n\n    const maxInterations = 500;\n    this.mapInfo = new MapInfo(bottomLeft, topRight, maxInterations);\r\n\r\n    this.colorMap = this.buildColorMap();\r\n\n    this.workers = [];\n    this.sections = [];\n\n    // Set the number of sections to 4 - because we have 4 logical processors.\r\n    this.numberOfSections = 4;\r\n    this.useWorkers = true;\r\n\r\n    //// For simplicity, do not use Web Workers and use only one section.\r\n    //this.numberOfSections = 1;\r\n    //this.useWorkers = false;\n  }\n\n  private buildColorMap(): ColorMap {\n\n    let cNumGenerator = new ColorNumbers();\n\n    let ranges: ColorMapEntry[] = new Array<ColorMapEntry>(4);\n    ranges[0] = new ColorMapEntry(10, cNumGenerator.white);\n    ranges[1] = new ColorMapEntry(20, cNumGenerator.red);\n    ranges[2] = new ColorMapEntry(50, cNumGenerator.green);\n    ranges[3] = new ColorMapEntry(200, cNumGenerator.blue);\n\n    let result: ColorMap = new ColorMap(ranges, cNumGenerator.black);\n    return result;\n  }\n\n  drawEndNote(): void {\n    //let ctx: CanvasRenderingContext2D = this.canvasRef.nativeElement.getContext('2d');\n\n    //ctx.fillStyle = '#DD0031';\n    //ctx.clearRect(0, 0, this.canvasSize.width, 20);\n  }\n\n  draw(imageData: ImageData, sectionNumber: number): void {\n    let ctx: CanvasRenderingContext2D = this.canvasRef.nativeElement.getContext('2d');\n\n    let cw: number = this.canvasRef.nativeElement.width;\n    let ch: number = this.canvasRef.nativeElement.height;\n\n    //console.log(\"Drawing on canvas with W = \" + cw + \" H = \" + ch);\n\n    //if (sectionNumber > 2) return;\n\n    let mapWorkingData: IMapWorkingData = this.sections[sectionNumber];\n\n    if (cw !== this.canvasSize.width || ch !== this.canvasSize.height) {\n      console.log('Draw detects that our canvas size has changed since intialization.')\n    }\n\n    // Check the image data's width to the canvas width for this section.\n    if (imageData.width !== mapWorkingData.canvasSize.width) {\n      console.log('Draw is being called with ImageData whose width does not equal canvas width for section number ' + sectionNumber + '.');\n    }\n\n    // Check the image data's height to the canvas height for this section.\n    if (imageData.height !== mapWorkingData.canvasSize.height) {\n      console.log('Draw is being called with ImageData whose height does not equal the canvas height for section number ' + sectionNumber + '.');\n    }\n\n    let left: number = mapWorkingData.sectionAnchor.x;\n    let bot: number = mapWorkingData.sectionAnchor.y;\n\n    ctx.fillStyle = '#DD0031';\n    ctx.clearRect(left, bot, imageData.width, imageData.height);\n\r\n    ctx.putImageData(imageData, left, bot);\r\n\r\n    console.log('Just drew image data for sn=' + sectionNumber + ' left=' + left + ' bot =' + bot  + '.');\r\n  }\n\n  ngOnInit(): void {\r\n    if (!this.componentInitialized) {\r\n      this.componentInitialized = true;\r\n      //console.log(\"We are inited.\");\r\n      //this.initWebWorker();\r\n    }\r\n    else {\r\n      //console.log('We are being inited, but ngOnInit has already been called.');\r\n    }\r\n  }\r\n\r\n  ngOnChanges() {\r\n    if (this.viewInitialized) {\r\n      console.log(\"m-map-display.component is handling ngOnChanges -- the view has NOT been initialized.\");\r\n    }\r\n    else {\r\n      console.log(\"m-map-display.component is handling ngOnChanges -- the view has been initialized.\");\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (!this.viewInitialized) {\r\n      this.viewInitialized = true;\r\n      console.log(\"Initializing the canvas size and building the Map Working Data here once because we are finally ready.\");\n\r\n      // Get the size of our canvas.\r\n      this.canvasSize = this.initMapDisplay();\r\n      console.log(\"The initial canvas size is W = \" + this.canvasSize.width + \" H = \" + this.canvasSize.height);\n\r\n      // Now that we know the size of our canvas,\r\n      if (this.useWorkers) {\n        // Create a MapWorkingData for each section.\n        this.sections = MapWorkingData.getWorkingDataSections(this.canvasSize, this.mapInfo, this.colorMap, this.numberOfSections);\r\n\r\n        let ptr: number = 0;\r\n        for (ptr = 0; ptr < this.numberOfSections; ptr++) {\r\n          console.log('Section Number: ' + ptr + ' bot=' + this.sections[ptr].sectionAnchor.y + '.');\r\n        }\r\n\r\n        // initialized our workers array (this.workers)\n        this.workers = this.initWebWorkers(this.numberOfSections);\n      }\n      else {\n        if (this.numberOfSections !== 1) {\n          //console.log('The number of sections must be set to 1, if useWorkers = false.');\n          throw new RangeError('The number of sections must be set to 1, if useWorkers = false.');\n        }\n        this.sections = new Array<IMapWorkingData>(1);\n        this.sections[0] = new MapWorkingData(this.canvasSize, this.mapInfo, this.colorMap, new Point(0, 0));\n\n        this.progresslvy();\n      }\n    }\r\n\r\n  }\n\n  private initMapDisplay(): ICanvasSize {\n\n    // Set our canvas size = to the number of pixels actually used to display our canvas HTML element.\n    const result: ICanvasSize = new CanvasSize(\n      this.canvasRef.nativeElement.offsetWidth,\n      this.canvasRef.nativeElement.offsetHeight\n    );\n\n    // Set the internal canvas's bitmap equal to the pixels on the screen. (Zoom = 1)\n    this.canvasRef.nativeElement.width = result.width;\n    this.canvasRef.nativeElement.height = result.height;\n\n    return result;\n  }\n\n  // Worker stuff\n  private initWebWorkers(numberOfSections: number): Worker[] {\n\n    let result: Worker[] = new Array<Worker>(numberOfSections);\n\n    let ptr: number = 0;\n\n    for (ptr = 0; ptr < numberOfSections; ptr++) {\n      let webWorker = new Worker('/assets/worker.js');\n      result[ptr] = webWorker;\n\n      webWorker.addEventListener(\"message\", (evt) => {\n        let plainMsg = WebWorkerMessage.FromEventData(evt.data);\n        if (plainMsg.messageKind === 'ImageDataResponse') {\n          let updatedMapDataMsg = WebWorkerImageDataResponse.FromEventData(evt.data);\n          let sectionNumber: number = updatedMapDataMsg.sectionNumber;\n\n          //console.log('Received ' + plainMsg.messageKind + ' with section number = ' + sectionNumber + ' from a web worker.');\n\n          let mapWorkingData: IMapWorkingData = this.sections[sectionNumber];\n          let imageData: ImageData = updatedMapDataMsg.getImageData(mapWorkingData.canvasSize);\n\n          //this.draw(imageData, sectionNumber);\n\n          if (mapWorkingData.curInterations < mapWorkingData.mapInfo.maxInterations) {\n\n            //this.workers[sectionNumber].postMessage(\"Iterate\");\n\n            let iterateRequest = WebWorkerIterateRequest.CreateRequest(this.iterationsPerStep);\n            this.workers[sectionNumber].postMessage(iterateRequest);\n            mapWorkingData.curInterations += this.iterationsPerStep;\n\n            //let imgDataToFill: ImageData = new ImageData(mapWorkingData.canvasSize.width, mapWorkingData.canvasSize.height);\n            //let pixelData: Uint8ClampedArray = imgDataToFill.data;\n\n            ////// Reuse the pixelData just returned to use from the WebWorker.\n            ////let pixelData = imageData.data;\n\n            //let getImageDataRequest = WebWorkerImageDataRequest.CreateRequest(pixelData);\n            //this.workers[sectionNumber].postMessage(getImageDataRequest, [getImageDataRequest.pixelData.buffer]);\n\n            // Call draw after sending the request to get the next ImageData.\n            this.draw(imageData, sectionNumber);\n          }\n          else {\n            // Call draw for the last ImageDataResponse\n            this.draw(imageData, sectionNumber);\n\n            // And then draw the end note.\n            this.drawEndNote();\n            console.log(\"Done.\");\n          }\n        }\n        else {\n          console.log('Received message from a web worker, The message = ' + plainMsg.messageKind + '.');\n        }\n      });\n\n\n      let mapWorkingData: IMapWorkingData = this.sections[ptr];\n      let startRequestMsg = WebWorkerStartRequest.CreateRequest(mapWorkingData, ptr);\r\n      webWorker.postMessage(startRequestMsg);\n\n\n      //webWorker.postMessage(\"Iterate\");\n      let iterateRequest = WebWorkerIterateRequest.CreateRequest(this.iterationsPerStep);\n      webWorker.postMessage(iterateRequest);\n      mapWorkingData.curInterations += this.iterationsPerStep;\n\n      ////let imgData: ImageData = new ImageData(mapWorkingData.canvasSize.width, mapWorkingData.canvasSize.height);\n      ////let pixelData: Uint8ClampedArray = imgData.data;\n\n      //let pixelData = mapWorkingData.pixelData;\n      //let getImageDataRequest = WebWorkerImageDataRequest.CreateRequest(pixelData);\n\n      //webWorker.postMessage(getImageDataRequest, [getImageDataRequest.pixelData.buffer]);\n\n    }\n\n    return result;\n  }\n\n  private progresslvy(): void {\n\n    const that = this;\n    let alive: boolean = true;\n\n    let iterCount = this.sections[0].mapInfo.maxInterations;\r\n    const intId = setInterval(doOneAndDraw, 5);\r\n\r\n    function doOneAndDraw() {\r\n      if (iterCount > 0 && alive) {\r\n        iterCount--;\r\n\r\n        let mapWorkinData: IMapWorkingData = that.sections[0];\r\n\r\n        alive = mapWorkinData.doInterationsForAll(1);\r\n\r\n        let pixelData: Uint8ClampedArray = mapWorkinData.getPixelData();\r\n\r\n        //mapWorkinData.updateImageData(mapWorkinData.pixelData);\r\n        let imageData = new ImageData(pixelData, mapWorkinData.canvasSize.width, mapWorkinData.canvasSize.height);\r\n\r\n        that.draw(imageData, 0);\r\n      } else {\r\n        clearInterval(intId);\r\n        that.drawEndNote();\r\n        console.log(\"No WebWorkers -- Done.\");\n      }\r\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MMapService } from './m-map.service';\nimport { MMapDisplayComponent } from './m-map.display/m-map.display.component';\r\nimport { MMapParamsComponent } from './m-map-params/m-map-params.component';\r\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    MMapDisplayComponent,\n    MMapParamsComponent\n  ],\n  exports: [MMapDisplayComponent, MMapParamsComponent],\n  providers: [MMapService]\n})\nexport class MMapModule { }\n","import { Injectable } from '@angular/core';\n\nimport {\r\n  IPoint, Point, ICanvasSize, CanvasSize,\n  IMapInfo, MapInfo, IMapWorkingData, MapWorkingData\r\n} from './m-map-common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MMapService {\n\n  constructor() { }\n\n  //public createMapWD(canvasSize: ICanvasSize, mapInfo: IMapInfo): IMapWorkingData {\n  //  const result: IMapWorkingData = new MapWorkingData(canvasSize, mapInfo, new Point(0,0));\n  //  return result;\n  //}\n\n  //public createTestMapWD(): IMapWorkingData {\n\n  //  const maxInterations = 1000;\n  //  const cs: ICanvasSize = new CanvasSize(100, 100);\n\n  //  const bottomLeft: IPoint = new Point(-2, -1);\n  //  const topRight: IPoint = new Point(1, 1);\n\n  //  const mi: IMapInfo = new MapInfo(bottomLeft, topRight, maxInterations);\n\n  //  const result: IMapWorkingData = new MapWorkingData(cs, mi, new Point(0,0));\n  //  return result;\n\n    \n    //var alive = result.doInterations(10);\n\n    //var flags: boolean[] = MapWorkingData.getFlagData(result);\n\n    //const fIndex:number = flags.findIndex(t => t === false);\n    //{ debugger }\n\n    ////alive = false;\n\n    ////for (var flag:boolean in flags) {\n    ////  if (!flag) {\n    ////    alive = true;\n    ////    break;\n    ////  }\n    ////}\n\n    //console.log(\"The flags has \" + flags.length + \" elements.\");\n\n    //if (alive) {\n    //  console.log(\"There is at least one point that is in the set.\");\n    //}\n    //else {\n    //  console.log(\"There are no points in the set.\");\n    //}\n    //return result;\n  //}\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}